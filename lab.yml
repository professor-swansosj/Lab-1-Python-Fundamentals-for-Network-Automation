title: "Lab 1 — Python Fundamentals & Structured Data"
course: "Software Defined Networking"
module: "Network Automation Fundamentals"
lab_number: 1
time_estimate: "60–90 min"

objectives:
  - "Build and use Python functions, classes, and methods."
  - "Implement basic exception handling with try/except."
  - "Work with structured data files: JSON, YAML, XML, and CSV."
  - "Log meaningful events to a file for grading and troubleshooting."
  - "Organize code into modules and run via the main guard."

python_version: "3.11"
accounts: ["GitHub"]
devices: ["Local filesystem + sample structured data"]

deliverables:
  readme_summary: "Standardized README describing objectives, prerequisites, grading, and tips."
  instructions_summary: "Step-by-step INSTRUCTIONS with required log markers; artifacts created under data/ and logs/."

grading:
  total_points: 75
  rows:
    - { step: "Step 2", requirement: "Dev Container opened; dependencies available", points: 5 }
    - { step: "Step 4", requirement: "JSON parsed successfully (`PARSE_JSON_SUCCESS`)", points: 5 }
    - { step: "Step 4", requirement: "YAML parsed successfully (`PARSE_YAML_SUCCESS`)", points: 5 }
    - { step: "Step 4", requirement: "XML parsed successfully (`PARSE_XML_SUCCESS`)", points: 5 }
    - { step: "Step 4", requirement: "CSV parsed successfully (`PARSE_CSV_SUCCESS`)", points: 5 }
    - { step: "Step 5", requirement: "At least one device summarized (`DEVICE_SUMMARY`)", points: 5 }
    - { step: "Step 6", requirement: "Interface message logged (`INTERFACE_MSG`)", points: 5 }
    - { step: "Step 6", requirement: "Device message logged (`DEVICE_MSG`)", points: 5 }
    - { step: "Step 6", requirement: "VLAN message logged (`VLAN_MSG`)", points: 5 }
    - { step: "Step 7", requirement: "Clean module structure (class + parser functions imported and used)", points: 10 }
    - { step: "Step 8", requirement: "Commit, push, and PR opened; logs present with start/end markers", points: 15 }

tips:
  - title: "Dev container / dependencies"
    symptom: "ImportError for yaml, csv, or XML libraries"
    fix: "Reopen in dev container; verify with `pip list`. If needed, run `pip install -r requirements.txt`."
  - title: "Wrong data paths"
    symptom: "FileNotFoundError when parsing `data/*`"
    fix: "Run from repo root and use relative paths like `data/devices.json`."
  - title: "Empty or invalid JSON/YAML/XML"
    symptom: "Parse errors or zero-length data"
    fix: "Use the provided sample files; validate formatting before parsing."
  - title: "No logs written"
    symptom: "`logs/lab.log` missing or empty"
    fix: "Call `logging.basicConfig(filename='logs/lab.log', level=logging.INFO)` once, near program start."

autograder:
  log_path: "logs/lab.log"
  required_markers:
    - "LAB1_START"
    - "[STEP 2] Dev Container Started"
    - "PARSE_JSON_SUCCESS"
    - "PARSE_YAML_SUCCESS"
    - "PARSE_XML_SUCCESS"
    - "PARSE_CSV_SUCCESS"
    - "DEVICE_SUMMARY"
    - "INTERFACE_MSG"
    - "DEVICE_MSG"
    - "VLAN_MSG"
    - "LAB1_END"

license: "© 2025 Your Name — Classroom use."

overview: >
  This lab warms up core Python skills for network automation. You’ll separate logic into
  modules (class + parsing helpers), read structured data (JSON, YAML, XML, CSV), and emit
  clear log lines that double as your grading criteria.

before_you_begin: >
  Open the dev container, confirm Python runs, and ensure you can list files under `data/`
  and write to `logs/`.

resources:
  - { title: "Python logging", url: "https://docs.python.org/3/library/logging.html" }
  - { title: "json", url: "https://docs.python.org/3/library/json.html" }
  - { title: "yaml (PyYAML)", url: "https://pyyaml.org/wiki/PyYAMLDocumentation" }
  - { title: "xml.etree.ElementTree", url: "https://docs.python.org/3/library/xml.etree.elementtree.html" }
  - { title: "csv", url: "https://docs.python.org/3/library/csv.html" }

faq:
  - q: "Where should logs go?"
    a: "Write to `logs/lab.log` and include the required markers listed in the README."
  - q: "Why split code into modules?"
    a: "It keeps functions/classes reusable and testing simpler; the main program stays small."

submission_checklist:
  - "`logs/lab.log` exists and includes LAB1_START/LAB1_END and all required markers."
  - "Parser functions handle JSON, YAML, XML, and CSV without crashing."
  - "At least one `DEVICE_SUMMARY` log line appears."
  - "`INTERFACE_MSG`, `DEVICE_MSG`, and `VLAN_MSG` appear at least once each."
  - "All code lives under `src/` and runs from `main.py`."

steps:
  - title: "Clone the Repository"
    goal: "Get the starter locally."
    actions: |
      Clone your Classroom repo and `cd` into it. Review the provided `data/` files and `src/` layout.
    done_when: |
      - You are in the repo folder and see `data/`, `logs/`, and `src/`.
      - You created `logs/` if it didn’t exist.
    log_marker: "LAB1_START"

  - title: "Open Dev Container"
    goal: "Use the standardized toolchain."
    actions: |
      Reopen in container and wait for the first-time install to finish. Verify `python --version`.
    done_when: |
      - Python prints a version (3.11+).
      - You append `[STEP 2] Dev Container Started` to the log.
    log_marker: "[STEP 2] Dev Container Started"

  - title: "Implement `NetworkDevice` class"
    goal: "Model a network device and log a summary."
    actions: |
      In `src/network_device.py`, implement/confirm the `NetworkDevice` class with `summarize()`
      that logs `DEVICE_SUMMARY: <hostname> (<type>) - <ip>`.
    done_when: |
      - A call to `summarize()` returns a string and writes a `DEVICE_SUMMARY` line to the log.
    log_marker: "DEVICE_SUMMARY"

  - title: "Implement parser helpers"
    goal: "Parse each structured data file safely."
    actions: |
      In `src/parser_utils.py`, implement `parse_json()`, `parse_yaml()`, `parse_xml()`, and `parse_csv()`.
      On success, log `PARSE_*_SUCCESS`; on failure, log `PARSE_*_ERROR` and return an empty list.
    done_when: |
      - Running the script produces `PARSE_JSON_SUCCESS`, `PARSE_YAML_SUCCESS`,
        `PARSE_XML_SUCCESS`, and `PARSE_CSV_SUCCESS` in the log.
    log_marker: "PARSE_JSON_SUCCESS, PARSE_YAML_SUCCESS, PARSE_XML_SUCCESS, PARSE_CSV_SUCCESS"

  - title: "Wire up `main.py`"
    goal: "Load data, build objects, and summarize."
    actions: |
      In `src/main.py`, configure logging to `logs/lab.log` once.
      Load `data/devices.json` (and other files) using your parser helpers.
      For each device, build a `NetworkDevice` and call `summarize()`.
    done_when: |
      - Device summaries are printed and logged.
    log_marker: "DEVICE_SUMMARY"

  - title: "Print + log required messages"
    goal: "Echo required lines for grading."
    actions: |
      Iterate your parsed data to produce:
        - `Interface { interface.name } is { interface.status }`
        - `Device { device.hostname } is a { device.location } { device.role }`
        - `VLAN { vlan.id } is the { vlan.name }`
      After each print, log:
        - `logging.info(f"INTERFACE_MSG: {msg}")`
        - `logging.info(f"DEVICE_MSG: {msg}")`
        - `logging.info(f"VLAN_MSG: {msg}")`
    done_when: |
      - Terminal shows the three message types at least once.
      - Log file includes `INTERFACE_MSG`, `DEVICE_MSG`, and `VLAN_MSG`.
    log_marker: "INTERFACE_MSG, DEVICE_MSG, VLAN_MSG"

  - title: "Refactor & tidy"
    goal: "Keep modules clean and imports explicit."
    actions: |
      Ensure only `main.py` runs the workflow; helpers stay importable and short.
    done_when: |
      - Code style is clean; modules are < ~100 lines each.
    log_marker: "MODULES_OK"

  - title: "Commit, push, and open PR"
    goal: "Submit work for grading."
    actions: |
      Commit your changes; push; open a PR targeting `main`.
    done_when: |
      - PR is open and CI passes.
    log_marker: "LAB1_END"




